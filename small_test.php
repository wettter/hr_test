<?php

/**
 * [1]=========================================
 * Что будет результатом работы такого скрипта?
 */

function addArrValues(array $data, string $a, string $b)
{
    $data[0] = $a;
    $data[1] = $b;
}

$data = [];
$a = 'a';
$b = 'b';

addArrValues($data, $a, $b);

foreach($data as $val){
    echo $val . ' ';
}

/** ОТВЕТ:

 */


/**
 * [2]=========================================
 * Что выведет echo?
 */

$a = 0;
$b = -1;
while ( $a <= 0 ) {
    $b++;
    if ( $b = 0 ) {
        $a++;
        $b++;
    }
    break;
}
echo $b . ' ' . $a;

/** ОТВЕТ:

 **/

/**
 * [3]=========================================
 * Что будет результатом работы такого скрипта?
 */

class foo {
    function printName()
    {
        echo 'This class name is '.self::getName().'!';
    }
    static function getName()
    {
        return 'foo';
    }
}

class bar extends foo {
    static function getName()
    {
        return 'bar';
    }
}
$bar = new bar();
$bar->printName(); // Вызов #1
bar::printName();  // Вызов #2


/** ОТВЕТ:
 * Вызов 1:
 * Вызов 2:
 **/

/**
 * [4]=========================================
 * 1 Что будет результатом работы такого скрипта?
 * 2 добейтесь результата "This class name is bar"
 */
class foo {
    protected function printName()
    {
        echo 'This class name is ' . static::getName();
    }

    static function getName()
    {
        return 'foo';
    }
}

class bar extends foo {

    static function getName()
    {
        return 'bar';
    }
}

$a = new bar();
$a->printName();

/** ОТВЕТ:
 * 1:
 * 2:
 **/

/**
 * [5]=========================================
 * Даны следующие таблицы phone и phone_vip:

phone
-------------
| id | phone_number |
------------
|  1 |  96299933334 |
|  2 |  9685666669 |
|  3 |  9031234567 |
-------------

phone_vip
------
| id |
------
|  1 |
|  4 |
------


Какой будет результат MySQL-запроса?

SELECT
phone_vip.id AS id,
phone.phone_number AS phone
FROM
phone_vip
LEFT JOIN
phone
USING (id)
WHERE
phone_vip.id IS NOT NULL;
 */


/**
ОТВЕТ (в таблицу):

-------------
| id | phone |
-------------
|____|______|
|____|______|
|____|______|
 *
 */


/**
 * [6]=========================================
 *
 * Пусть есть таблица tbl_phones (phone_number, daily_subscription_id),
 * (каждый daily_subscription_id встречается в таблице ровно один раз),
 * на каждом номере их может быть несколько.
 *
 ---------------------------------------------
| phone_number | daily_subscription_id (уник)|
---------------------------------------------
|  96299933334 |              233            |
|  96299933334 |              234            |
|  96299933334 |              235            |
|     ....     |              ...            |
|     ....     |              ...            |
|     ....     |              ...            |
|  9621234567  |              246            |
|  9621234567  |              247            |
----------------------------------------------
 *
 * И пусть есть таблица tbl_subscription (daily_subscription_id, day_id, flag),
 * где day_id принимает значения от 1 до 30,
 * flag равен 1, если абонентская плата списалась, иначе равен 0.
 *
---------------------------------------------
| daily_subscription_id (уник) | day_id| flag|
---------------------------------------------
|              233            |   10   |  1  |
|              234            |   11   |  0  |
|              235            |   12   |  1  |
|              ...            |   ..   | ... |
|              ...            |   ..   | ... |
|              ...            |   ..   | ... |
|              246            |   10   |  0  |
|              247            |   11   |  0  |
---------------------------------------------
 *
 * Нужно написать SQL-запрос,
 * который выбирает номера phone_number,
 * у которых не списана абонентская плата за все 30 дней
 */

/** ОТВЕТ:

 **/


/**
 * [7]=========================================
 *
Необходимо спроектировать структуру базы данных для интернет-магазина,
исходя из следующих требований:

- На сайте представлен каталог товаров (витрина для посетителей).
- Каждый товар может продаваться несколькими поставщиками.
- Поставщики передают нам свои цены на товары (прайс-листы) по своему графику.
- Прйс-лист содержит одну или несколько видов цен для каждого товара (розничная, оптовая).

— На странице товара на витрине нужно выводить розничную и оптовую цену — цену для посетителей.
— Необходимо сохранять историю изменения цен для каждого поставщика, для каждого вида цены.

- Пользователи могут оставить отзыв на товар и/или поставить свою оценку (от 1 до 5).
- На странице товара на витрине нужно выводить среднюю оценку товара.
 */


/** ОТВЕТ (описать или нарисовать таблицы и связи):

 **/


